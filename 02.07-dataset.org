-*- org-babel-clojure-backend: cider; -*-
#+begin_src clojure :results none :exports both
(ns clj-d2l.dataframe
  (:require [clj-djl.dataframe :as df]))
#+end_src


#+begin_src clojure :results value pp :exports both
(def DS (df/->dataframe {:V1 (take 9 (cycle [1 2]))
                         :V2 (range 1 10)
                         :V3 (take 9 (cycle [0.5 1.0 1.5]))
                         :V4 (take 9 (cycle ["A" "B" "C"]))}))
DS
#+end_src

#+RESULTS:
#+begin_example
_unnamed [9 4]:

| :V1 | :V2 | :V3 | :V4 |
|-----|-----|-----|-----|
|   1 |   1 | 0.5 |   A |
|   2 |   2 | 1.0 |   B |
|   1 |   3 | 1.5 |   C |
|   2 |   4 | 0.5 |   A |
|   1 |   5 | 1.0 |   B |
|   2 |   6 | 1.5 |   C |
|   1 |   7 | 0.5 |   A |
|   2 |   8 | 1.0 |   B |
|   1 |   9 | 1.5 |   C |
#+end_example


#+begin_src clojure :results value pp :exports both
(df/->dataframe [])
#+end_src

#+RESULTS:
: _unnamed [0 0]


#+begin_src clojure :results value pp :exports both
(df/->dataframe {:A [1 2 3] :B "X"})
#+end_src

#+RESULTS:
: _unnamed [3 2]:
:
: | :A | :B |
: |----|----|
: |  1 |  X |
: |  2 |    |
: |  3 |    |
