#+PROPERTY: header-args    :tangle src/clj_d2l/data_preprocess.clj
* Data Preprocessing

#+begin_src clojure :results silent
(ns clj-d2l.data-preprocess
  (:require
   [clojure.java.io :as io]
   [clj-djl.ndarray :as nd]
   [clj-djl.dataframe :as df]
   [clj-djl.dataframe.functional :as dfn]
   [clj-d2l.core :as d2l]))
#+end_src

** Reading the Dataset

#+begin_src clojure :results output pp :exports both
(let [filename "data/house_tiny.csv"
      records ["NumRooms,Alley,Price\n"  ;; Column names
               "NA,Pave,127500\n"        ;;Each row represents a data example
               "2,NA,106000\n"
               "4,NA,178100\n"
               "NA,NA,140000\n"]]
  (io/make-parents filename)
  (dorun
   (map #(spit filename % :append true) records)))

(def data (df/->dataframe "data/house_tiny.csv"))

data
#+end_src

#+RESULTS:
: data/house_tiny.csv [4 3]:
:
: | NumRooms | Alley |  Price |
: |----------|-------|--------|
: |          |  Pave | 127500 |
: |        2 |       | 106000 |
: |        4 |       | 178100 |
: |          |       | 140000 |


** Handling Missing Data

#+begin_src clojure :results value pp :exports both
(def dataset
  (let [data (-> (df/replace-missing data ["NumRooms"] :down)
                 (df/categorical->one-hot ["Alley"])
                 (df/replace-missing :all :down))
        inputs (df/select-columns data ["NumRooms" "Alley-" "Alley-Pave"])
        outputs (df/select-columns data ["Price"])]
    [inputs outputs]))
dataset
#+end_src

#+RESULTS:
#+begin_example
[data/house_tiny.csv [4 3]:

| NumRooms | Alley- | Alley-Pave |
|----------|--------|------------|
|        2 |    0.0 |        1.0 |
|        2 |    0.0 |        1.0 |
|        4 |    0.0 |        1.0 |
|        4 |    0.0 |        1.0 |
 data/house_tiny.csv [4 1]:

|  Price |
|--------|
| 127500 |
| 106000 |
| 178100 |
| 140000 |
]
#+end_example


** Conversion to the Tensor Format

#+begin_src clojure :results silent :exports both
(def ndm (nd/new-base-manager))
(def X (df/->ndarray ndm (get dataset 0)))
(def y (df/->ndarray ndm (get dataset 1)))
#+end_src

#+begin_src clojure :results value pp :exports both
X
#+end_src

#+RESULTS:
: ND: (4, 3) cpu() int64
: [[ 2,  0,  1],
:  [ 2,  0,  1],
:  [ 4,  0,  1],
:  [ 4,  0,  1],
: ]

#+begin_src clojure :results value pp :exports both
y
#+end_src

#+RESULTS:
: ND: (4, 1) cpu() int64
: [[127500],
:  [106000],
:  [178100],
:  [140000],
: ]
