 #+TITLE: Data Manipulation
#+PROPERTY: header-args    :tangle src/clj_d2l/data_manipulation.clj

* Data Manipulation

In order to get anything done, we need some way to store and
manipulate data. Generally, there are two important things we need
to do with data: (i) acquire them; and (ii) process them once they
are inside the computer. There is no point in acquiring data without
some way to store it, so let us get our hands dirty first by playing
with synthetic data. To start, we introduce the $n$-dimensional
array, which is also called the /ndarray/.

If you have worked with NumPy, the most widely-used scientific
computing package in Python, then you will find this section
familiar. No matter which framework you use, its tensor class
(/ndarray/ in MXNet, DJL and clj-djl, /Tensor/ in both PyTorch and
TensorFlow) is similar to NumPy's ndarray with a few killer
features. First, GPU is well-supported to accelerate the computation
whereas NumPy only supports CPU computation. Second, the tensor
class supports automatic differentiation. These properties make the
tensor class suitable for deep learning. Throughout the book, when
we say ndarrays, we are referring to instances of the ndarray class
unless otherwise stated.

** Getting Started

In this section, we aim to get you up and running, equipping you
with the basic math and numerical computing tools that you will
build on as you progress through the book. Do not worry if you
struggle to grok some of the mathematical concepts or library
functions. The following sections will revisit this material in the
context of practical examples and it will sink. On the other hand,
if you already have some background and want to go deeper into the
mathematical content, just skip this section.

To start, we import the ndarray namespace from clj-djl. Here, the
ndarray namespace includes functions supported by clj-djl.

#+begin_src clojure :results silent
(ns clj-d2l.data-manipulation
  (:require [clj-djl.ndarray :as nd]))
#+end_src

An ndarray represents a (possibly multi-dimensional) array of
numerical values. With one axis, an ndarray corresponds (in math) to
a vector. With two axes, an ndarray corresponds to a
matrix. NDArrays with more than two axes do not have special
mathematical names.

To start, we can use arange to create a row vector x containing the
first 12 integers starting with 0. Each of the values in an ndarray
is called an element of the ndarray. For instance, there are 12
elements in the ndarray x. Unless otherwise specified, a new ndarray
will be stored in main memory and designated for CPU-based
computation.

#+begin_src clojure :results value pp :exports both
(def ndm (nd/new-base-manager))
(def x (nd/arange ndm 0 12))
x
#+end_src

#+RESULTS:
: ND: (12) cpu() int32
: [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11]

We can access an ndarray's shape (the length along each axis) by
inspecting its shape property.

#+begin_src clojure :results value pp :exports both
(nd/get-shape x)
#+end_src

#+RESULTS:
: (12)

If we just want to know the total number of elements in an ndarray,
i.e., the product of all of the shape elements, we can inspect its
size. Because we are dealing with a vector here, the single element
of its shape is same to its size. The difference is that =get-shape=
will return a /Shape/ object.

#+begin_src clojure :results value pp :exports both
(nd/size x)
#+end_src

#+RESULTS:
: 12

To change the shape of an ndarray without altering either the number
of elements or their values, we can invoke the reshape function. For
example, we can transform our ndarray, x, from a row vector with
shape (12,) to a matrix with shape (3, 4). This new ndarray contains
the exact same values, but views them as a matrix organized as 3
rows and 4 columns. To reiterate, although the shape has changed,
the elements have not. Note that the size is unaltered by reshaping.

#+begin_src clojure :results value pp :exports both
(def y (nd/reshape x [3 4]))
y
#+end_src

#+RESULTS:
: ND: (3, 4) cpu() int32
: [[ 0,  1,  2,  3],
:  [ 4,  5,  6,  7],
:  [ 8,  9, 10, 11],
: ]

Reshaping by manually specifying every dimension is unnecessary. If
our target shape is a matrix with shape (height, width), then after
we know the width, the height is given implicitly. Why should we
have to perform the division ourselves? In the example above, to get
a matrix with 3 rows, we specified both that it should have 3 rows
and 4 columns. Fortunately, ndarrays can automatically work out one
dimension given the rest. We invoke this capability by placing -1
for the dimension that we would like ndarrays to automatically
infer. In our case, instead of calling x.reshape(3, 4), we could
have equivalently called =(nd/reshape x [-1 4])= or =(nd/reshape x [3
-1])=.

#+begin_src clojure :results pp :exports both
(def y (nd/reshape x [3 -1]))
y
#+end_src

#+RESULTS:
: ND: (3, 4) cpu() int32
: [[ 0,  1,  2,  3],
:  [ 4,  5,  6,  7],
:  [ 8,  9, 10, 11],
: ]

#+begin_src clojure :results pp :exports both
(nd/shape 2 3)
#+end_src

#+RESULTS:
: (2, 3)

#+begin_src clojure :results pp :exports both
(nd/create ndm (int-array [2 3]))
#+end_src

#+RESULTS:
: ND: (2) cpu() int32
: [ 2,  3]

Typically, we will want our matrices initialized either with zeros,
ones, some other constants, or numbers randomly sampled from a
specific distribution. We can create a ndarray representing a tensor
with all elements set to 0 and a shape of =[2 3 4]= as follows:

#+begin_src clojure :results value pp :exports both
(nd/zeros ndm [2 3 4])
#+end_src

#+RESULTS:
#+begin_example
ND: (2, 3, 4) cpu() float32
[[[0., 0., 0., 0.],
  [0., 0., 0., 0.],
  [0., 0., 0., 0.],
 ],
 [[0., 0., 0., 0.],
  [0., 0., 0., 0.],
  [0., 0., 0., 0.],
 ],
]
#+end_example

Similarly, we can create ndarrays with each element set to 1 as follows:

#+begin_src clojure :results value pp :exports both
(nd/ones ndm [2 3 4])
#+end_src

#+RESULTS:
#+begin_example
ND: (2, 3, 4) cpu() float32
[[[1., 1., 1., 1.],
  [1., 1., 1., 1.],
  [1., 1., 1., 1.],
 ],
 [[1., 1., 1., 1.],
  [1., 1., 1., 1.],
  [1., 1., 1., 1.],
 ],
]
#+end_example

Often, we want to randomly sample the values for each element in an ndarray from
some probability distribution. For example, when we construct arrays to serve as
parameters in a neural network, we will typically initialize their values
randomly. The following snippet creates an ndarray with shape (3, 4). Each of
its elements is randomly sampled from a standard Gaussian (normal) distribution
with a mean of 0 and a standard deviation of 1.

#+begin_src clojure :results value pp :exports both
(nd/random-normal ndm 0 1 (nd/shape [3 4]))
#+end_src

#+RESULTS:
: ND: (3, 4) cpu() float32
: [[-1.7376,  0.0664,  0.0473,  0.8487],
:  [ 0.1458, -0.8004,  0.326 , -0.1688],
:  [ 0.4579,  0.9363, -0.8943,  0.3574],
: ]

We can directly use a clojure vec as the shape:

#+begin_src clojure :results value pp :exports both
(nd/random-normal ndm 0 1 [3 4])
#+end_src

#+RESULTS:
: ND: (3, 4) cpu() float32
: [[ 0.4938,  0.7793, -0.9043, -1.0103],
:  [-1.2141, -0.3916,  2.1564,  1.3166],
:  [ 1.0938, -0.4329,  1.8271,  0.7154],
: ]

You can also just pass the shape and it will use default values for mean and
standard deviation (0 and 1).

#+begin_src clojure :results value pp :exports both
(nd/random-normal ndm [3 4])
#+end_src

#+RESULTS:
: ND: (3, 4) cpu() float32
: [[-0.7922,  0.2415,  0.9321,  0.479 ],
:  [-3.1558,  0.9689,  2.1935, -1.0218],
:  [-0.5386, -0.0681, -0.8611, -0.3187],
: ]

We can also specify the exact values for each element in the desired ndarray by
supplying a clojure vec (or list) containing the numerical values. Here, the
outermost list corresponds to axis 0, and the inner list to axis 1.

#+begin_src clojure :results value pp :exports both
(nd/create ndm [[2 1 4 3][1 2 3 4][4 3 2 1]])
#+end_src

#+RESULTS:
: ND: (3, 4) cpu() int64
: [[ 2,  1,  4,  3],
:  [ 1,  2,  3,  4],
:  [ 4,  3,  2,  1],
: ]

** Operations

This book is not about software engineering. Our interests are not limited to
simply reading and writing data from/to arrays. We want to perform mathematical
operations on those arrays. Some of the simplest and most useful operations are
the elementwise operations. These apply a standard scalar operation to each
element of an array. For functions that take two arrays as inputs, elementwise
operations apply some standard binary operator on each pair of corresponding
elements from the two arrays. We can create an elementwise function from any
function that maps from a scalar to a scalar.

In mathematical notation, we would denote such a unary scalar operator (taking
one input) by the signature $f: \mathbb{R} \ rightarrow \mathbb{R}$. This just
means that the function is mapping from any real number ($\mathbb{R}$) onto
another. Likewise, we denote a binary scalar operator (taking two real inputs,
and yielding one output) by the signature $f: \mathbb{R}, \mathbb{R} \rightarrow
\mathbb{R}$. Given any two vectors $\mathbf{u}$ and $\mathbf{v}$ *of the same
shape*, and a binary operator $f$, we can produce a vector $\mathbf{c} =
F(\mathbf{u}, \mathbf{v})$ by setting $c_i \gets f(u_i, v_i)$ for all $i$, where
$c_i, u_i$, and $v_i$ are the $i^\mathrm{th}$ elements of vectors $\mathbf{c}$,
$\mathbf{u}$, and $\mathbf{v}$. Here, we produced the vector-valued $F:
\mathbb{R}^d, \mathbb{R}^d \rightarrow \mathbb{R}^d$ by *lifting* the scalar
function to an elementwise vector operation.

The common standard arithmetic operators (=+=, =-=, =*=, =/=, and =**=) have all
been *lifted* to elementwise operations for any identically-shaped ndarrays of
arbitrary shape. We can call elementwise operations on any two ndarrays of the
same shape. In the following example, we use commas to formulate a 5-element
tuple, where each element is the result of an elementwise operation.

*** Operations

The common standard arithmetic operators (=+=, =-=, =*=, =/=, and =**=) have all been
lifted to elementwise operations.

#+begin_src clojure :results value pp :exports both
(def x (nd/create ndm [1. 2. 4. 8.]))
(def y (nd/create ndm [2. 2. 2. 2.]))
(nd/+ x y)
#+end_src

#+RESULTS:
: ND: (4) cpu() float64
: [ 3.,  4.,  6., 10.]

#+begin_src clojure :results value pp :exports both
(nd/- x y)
#+end_src

#+RESULTS:
: ND: (4) cpu() float64
: [-1.,  0.,  2.,  6.]

#+begin_src clojure :results value pp :exports both
(nd// x y)
#+end_src

#+RESULTS:
: ND: (4) cpu() float64
: [0.5, 1. , 2. , 4. ]

#+begin_src clojure :results value pp :exports both
(nd/** x y)
#+end_src

#+RESULTS:
: ND: (4) cpu() float64
: [ 1.,  4., 16., 64.]

Many more operations can be applied elementwise, including unary operators like
exponentiation.

#+begin_src clojure :results value pp :exports both
(nd/exp x)
#+end_src

#+RESULTS:
: ND: (4) cpu() float64
: [ 2.71828183e+00,  7.38905610e+00,  5.45981500e+01,  2.98095799e+03]

In addition to elementwise computations, we can also perform linear algebra
operations, including vector dot products and matrix multiplication. We will
explain the crucial bits of linear algebra (with no assumed prior knowledge) in
-Section 2.3-.

We can also concatenate multiple ndarrays together, stacking them end-to-end to
form a larger ndarray. We just need to provide a list of ndarrays and tell the
system along which axis to concatenate. The example below shows what happens
when we concatenate two matrices along rows (axis 0, the first element of the
shape) vs. columns (axis 1, the second element of the shape). We can see that
the first output ndarray's axis-0 length (6 ) is the sum of the two input
ndarrays' axis-0 lengths $(3+3)$; while the second output ndarray's axis-1
length (8) is the sum of the two input ndarrays' axis-1 lengths $(4+4)$.

#+begin_src clojure :results value pp :exports both
(def X (-> (nd/arange ndm 12)
           (nd/reshape [3 4])))
X
#+end_src

#+RESULTS:
: ND: (3, 4) cpu() int32
: [[ 0,  1,  2,  3],
:  [ 4,  5,  6,  7],
:  [ 8,  9, 10, 11],
: ]

#+begin_src clojure :results value pp :exports both
(def Y (nd/create ndm [[2 1 4 3][1 2 3 4][4 3 2 1]]))
Y
#+end_src

#+RESULTS:
: ND: (3, 4) cpu() int64
: [[ 2,  1,  4,  3],
:  [ 1,  2,  3,  4],
:  [ 4,  3,  2,  1],
: ]

#+begin_src clojure :results value pp :exports both
;; concat only support int32 and float32 datatype
(def Y (nd/to-type Y :int32 false))
(nd/concat X Y)
#+end_src

#+RESULTS:
: ND: (6, 4) cpu() int32
: [[ 0,  1,  2,  3],
:  [ 4,  5,  6,  7],
:  [ 8,  9, 10, 11],
:  [ 2,  1,  4,  3],
:  [ 1,  2,  3,  4],
:  [ 4,  3,  2,  1],
: ]

#+begin_src clojure :results value pp :exports both
(nd/concat X Y 1)
#+end_src

#+RESULTS:
: ND: (3, 8) cpu() int32
: [[ 0,  1,  2,  3,  2,  1,  4,  3],
:  [ 4,  5,  6,  7,  1,  2,  3,  4],
:  [ 8,  9, 10, 11,  4,  3,  2,  1],
: ]

Sometimes, we want to construct a binary ndarray via logical statements. Take X
== Y as an example. For each position, if X and Y are equal at that position,
the corresponding entry in the new tensor takes a value of 1, meaning that the
logical statement X == Y is true at that position; otherwise that position
takes 0.

#+begin_src clojure :results output pp :exports both
(nd/= X Y)
#+end_src

#+RESULTS:
: ND: (3, 4) cpu() boolean
: [[false,  true, false,  true],
:  [false, false, false, false],
:  [false, false, false, false],
: ]

Summing all the elements in the ndarray yields a ndarray with only one element.

#+begin_src clojure :results value pp :exports both
(nd/sum X)
#+end_src

#+RESULTS:
: ND: () cpu() int32
: 66

** Broadcasting Mechanism

#+begin_src clojure :results output :exports both
(def a (-> (nd/arange ndm 3) (nd/reshape [3 1])))
(d2l/ps a)
(def b (-> (nd/arange ndm 2) (nd/reshape [1 2])))
(d2l/ps b)
(d2l/ps (nd/+ a b))
#+end_src

#+RESULTS:
#+begin_example
ND: (3, 1) cpu() int32
[[ 0],
 [ 1],
 [ 2],
]
ND: (1, 2) cpu() int32
[[ 0,  1],
]
ND: (3, 2) cpu() int32
[[ 0,  1],
 [ 1,  2],
 [ 2,  3],
]
#+end_example


** Indexing and Slicing

#+begin_src clojure :results output :exports both
(d2l/ps X)
(d2l/ps (nd/get X "-1"))
(d2l/ps (nd/get X "1:3"))
(d2l/ps (nd/set X "1,2" 9))
(d2l/ps (nd/set X "0:2,:" 12))
#+end_src

#+RESULTS:
#+begin_example
ND: (3, 4) cpu() int32
[[ 0,  1,  2,  3],
 [ 4,  5,  6,  7],
 [ 8,  9, 10, 11],
]
ND: (4) cpu() int32
[ 8,  9, 10, 11]
ND: (2, 4) cpu() int32
[[ 4,  5,  6,  7],
 [ 8,  9, 10, 11],
]
ND: (3, 4) cpu() int32
[[ 0,  1,  2,  3],
 [ 4,  5,  9,  7],
 [ 8,  9, 10, 11],
]
ND: (3, 4) cpu() int32
[[12, 12, 12, 12],
 [12, 12, 12, 12],
 [ 8,  9, 10, 11],
]
#+end_example


** Saving Memory

#+begin_src clojure :results output :exports both
(def original (nd/zeros ndm (nd/get-shape X)))
(def actual (nd/+ original X))
(d2l/ps original)
(d2l/ps actual)
(d2l/psl (identical? original actual))
(def copy (nd/+! original X))
(d2l/ps original)
(d2l/ps copy)
(d2l/psl (identical? original copy))
#+end_src

#+RESULTS:
#+begin_example
ND: (3, 4) cpu() float32
[[0., 0., 0., 0.],
 [0., 0., 0., 0.],
 [0., 0., 0., 0.],
]
ND: (3, 4) cpu() float32
[[12., 12., 12., 12.],
 [12., 12., 12., 12.],
 [ 8.,  9., 10., 11.],
]
false
ND: (3, 4) cpu() float32
[[12., 12., 12., 12.],
 [12., 12., 12., 12.],
 [ 8.,  9., 10., 11.],
]
ND: (3, 4) cpu() float32
[[12., 12., 12., 12.],
 [12., 12., 12., 12.],
 [ 8.,  9., 10., 11.],
]
true
#+end_example

#+begin_src clojure :results output :exports both
(def original (nd/zeros-like X))
(def actual (nd/+ original X))
(d2l/ps original)
(d2l/ps actual)
(println (identical? original actual))
(def copy (nd/+! original X))
(d2l/ps original)
(d2l/ps copy)
(println (identical? original copy))
#+end_src

#+RESULTS:
#+begin_example
ND: (3, 4) cpu() int32
[[ 0,  0,  0,  0],
 [ 0,  0,  0,  0],
 [ 0,  0,  0,  0],
]
ND: (3, 4) cpu() int32
[[12, 12, 12, 12],
 [12, 12, 12, 12],
 [ 8,  9, 10, 11],
]
false
ND: (3, 4) cpu() int32
[[12, 12, 12, 12],
 [12, 12, 12, 12],
 [ 8,  9, 10, 11],
]
ND: (3, 4) cpu() int32
[[12, 12, 12, 12],
 [12, 12, 12, 12],
 [ 8,  9, 10, 11],
]
true
#+end_example

** Conversion to Other Clojure Objects

#+begin_src clojure :results output :exports both

(d2l/psl (type (nd/to-vec X)))
(d2l/psl (nd/to-vec X))
(d2l/psl (type (nd/to-array X)))
(d2l/psl (type X))
(d2l/ps X)
#+end_src

#+RESULTS:
: class clojure.lang.PersistentVector
: [12 12 12 12 12 12 12 12 8 9 10 11]
: class [Ljava.lang.Integer;
: class ai.djl.mxnet.engine.MxNDArray
: ND: (3, 4) cpu() int32
: [[12, 12, 12, 12],
:  [12, 12, 12, 12],
:  [ 8,  9, 10, 11],
: ]

To convert a size-1 tensor to a scalar

#+begin_src clojure :results output :exports both
(def a (nd/create ndm [3.5]))
(d2l/ps a)
(println (nd/get-element a))
#+end_src

#+RESULTS:
: ND: (1) cpu() float64
: [3.5]
: 3.5
