#+PROPERTY: header-args    :tangle ../src/clj_d2l/image_classification.clj
* The Image Classification Dataset

One of the widely used dataset for image classification is the MNIST
dataset [LeCun et al., 1998]. While it had a good run as a benchmark
dataset, even simple models by todayâ€™s standards achieve
classification accuracy over 95%, making it unsuitable for
distinguishing between stronger models and weaker ones. Today, MNIST
serves as more of sanity checks than as a benchmark. To up the ante
just a bit, we will focus our discussion in the coming sections on the
qualitatively similar, but comparatively complex Fashion-MNIST dataset
[Xiao et al., 2017], which was released in 2017.

#+begin_src clojure :results silent
(ns clj-d2l.image-classification
  (:require [clj-djl.training.dataset :as ds]
            [clj-djl.ndarray :as nd]
            [stopwatch.core :as stopwatch])
  (:import [ai.djl.basicdataset.cv.classification FashionMnist]))
#+end_src

** Getting the Dataset

We can download and read the Fashion-MNIST dataset into memory via the
build-in functions in the framework.

#+begin_src emacs-lisp :tangle no
;; downloading time may be quite long, extend the repl timeout time
(setq org-babel-clojure-sync-nrepl-timeout 1000)
#+end_src

#+RESULTS:
: 1000

#+begin_src clojure :results pp :exports both
(def batch-size 256)
(def random-shuffle true)

(def mnist-train (-> (FashionMnist/builder)
                     (ds/opt-usage :train)
                     (ds/set-sampling batch-size random-shuffle)
                     (ds/build)
                     (ds/prepare)))

(def mnist-test (-> (FashionMnist/builder)
                    (ds/opt-usage :test)
                    (ds/set-sampling batch-size random-shuffle)
                    (ds/build)
                    (ds/prepare)))
#+end_src

Fashion-MNIST consists of images from 10 categories, each represented
by 6000 images in the training dataset and by 1000 in the test
dataset. A *test dataset* (or test set) is used for evaluating model
performance and not for training. Consequently the training set and
the test set contain 60000 and 10000 images, respectively.

#+RESULTS:
: #'clj-d2l.image-classification/mnist-test

#+begin_src clojure :results pp :exports both :eval no-export
[(nd/size mnist-test)
 (nd/size mnist-train)]
#+end_src

#+RESULTS:
: [10000 60000]

The height and width of each input image are both 28 pixels. Note that
the dataset consists of grayscale images, whose number of channels
is 1. For brevity, throughout this book we store the shape of any
image with height \(h\) width \(w\) pixels as \(h \times w\) or \((h,
w)\).

#+begin_src clojure :results pp :exports both :eval no-export
(def ndm (nd/base-manager))
#+end_src

#+begin_src clojure :results pp :exports both :eval no-export
(def train-ds (ds/get-data-iterator mnist-train ndm))
#+end_src

#+RESULTS:
: #'clj-d2l.image-classification/train-ds

#+begin_src clojure :results pp :exports both :eval no-export
(nd/shape (nd/get (first (ds/get-data (first train-ds))) [0]))
#+end_src

#+RESULTS:
: (1, 28, 28)

The images in Fashion-MNIST are associated with the following
categories: t-shirt, trousers, pullover, dress, coat, sandal, shirt,
sneaker, bag, and ankle boot. The following function converts between
numeric label indices and their names in text.

#+begin_src clojure :results pp :exports both :eval no-export
(defn get-fashion-mnist-labels [labels]
  (let [num-label-map  {0 "t-shirt" 1 "trouser" 2 "pullover"
                        3 "dress" 4 "coat" 5 "sandal"
                        6 "shirt" 7 "sneaker" 8 "bag"
                        9 "ankle boot"}]
    (map num-label-map labels)))
(print (get-fashion-mnist-labels [1 2 2 4]))
#+end_src

#+RESULTS:
: (trouser pullover pullover coat)

We can now create a function to visualize these examples.

#+begin_src clojure :results pp :exports both :eval no-export
;; TODO
;; how to convert ndarray to an image?
#+end_src

** Reading a Minibatch

To make our life easier when reading from the training and test sets,
we use the built-in data iterator rather than creating one from
scratch. Recall that at each iteration, a data iterator reads a
minibatch of data with size ~batch-size~ each time. We also randomly
shuffle the examples for the training data iterator.

Let us look at the time it takes to read the training data.

#+begin_src clojure :results pp :exports both :eval no-export
(let [elapsed (stopwatch/start)]
  (for [batch train-ds]
    [(first (ds/get-data batch))
     (first (ds/get-labels batch))])
  (println "Elapsed: " (/ (elapsed) 1e9) "sec"))
#+end_src

#+RESULTS:
: Elapsed:  1.667E-4 sec

We are now ready to work with the Fashion-MNIST dataset in the sections that follow.

** Summary

- Fashion-MNIST is an apparel classification dataset consisting of
  images representing 10 categories. We will use this dataset in
  subsequent sections and chapters to evaluate various classification
  algorithms.
- We store the shape of any image with height \(h\) width \(w\) pixels
  as \(h \times w\) or (\(h\), \(w\)).
- Data iterators are a key component for efficient performance. Rely
  on well-implemented data iterators that exploit high-performance
  computing to avoid slowing down your training loop.
